
Vou fornecer um exemplo simplificado usando Node.js e Express para o backend. Neste exemplo, assumirei que estamos construindo uma aplicação de lista de tarefas.

Estrutura de Pastas:

lua
Copy code
├── src
│   ├── entities
│   │   └── task.js
│   ├── usecases
│   │   ├── taskUseCases.js
│   │   └── index.js
│   ├── adapters
│   │   ├── controllers
│   │   │   └── taskController.js
│   │   └── routes
│   │       └── index.js
│   ├── config
│   │   └── express.js
│   └── index.js
├── tests
│   └── taskUseCases.test.js
└── package.json
Entities (src/entities/task.js):

javascript
Copy code
class Task {
  constructor(id, title, completed = false) {
    this.id = id;
    this.title = title;
    this.completed = completed;
  }
}

module.exports = Task;
Use Cases (src/usecases/taskUseCases.js):

javascript
Copy code
const Task = require('../entities/task');

function createTask(title) {
  const task = new Task(/* generate id */, title);
  // Perform any additional business logic or validation here
  return task;
}

module.exports = {
  createTask,
};
Use Cases Index (src/usecases/index.js):

javascript
Copy code
const taskUseCases = require('./taskUseCases');

module.exports = {
  taskUseCases,
};
Controllers (src/adapters/controllers/taskController.js):

javascript
Copy code
const express = require('express');
const { taskUseCases } = require('../../usecases');

const router = express.Router();

router.post('/tasks', (req, res) => {
  const { title } = req.body;
  const task = taskUseCases.createTask(title);
  // Handle task creation response
  res.status(201).json(task);
});

module.exports = router;
Routes (src/adapters/routes/index.js):

javascript
Copy code
const express = require('express');
const taskController = require('../controllers/taskController');

const router = express.Router();

router.use('/api', taskController);

module.exports = router;
Configuração (src/config/express.js):

javascript
Copy code
const express = require('express');
const routes = require('../adapters/routes');

const app = express();

app.use(express.json());
app.use(routes);

module.exports = app;
Inicialização (src/index.js):

javascript
Copy code
const app = require('./config/express');

const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
Testes (tests/taskUseCases.test.js):

javascript
Copy code
const { taskUseCases } = require('../src/usecases');

describe('Task Use Cases', () => {
  it('should create a task', () => {
    const task = taskUseCases.createTask('Example Task');
    expect(task.title).toBe('Example Task');
    expect(task.completed).toBe(false);
  });
});
Este é apenas um exemplo básico e simplificado. Em um projeto real, você precisaria lidar com validações, persistência de dados, autenticação, e outras considerações. Certifique-se de ajustar a estrutura de acordo com os requisitos específicos do seu projeto.





